//------------------------------------------------------------------------
// 简称: TurtleTrader
// 名称: 海龟交易系统
// 类别: 公式应用
// 类型: 内建应用
//------------------------------------------------------------------------

PARAMS
	Numeric RiskRatio(1); // % Risk Per N ( 0 - 100)
	Numeric ATRLength(20); // 平均波动周期 ATR Length
	Numeric boLength(20); // 短周期 breakOut Length
	Numeric fsLength(55); // 长周期 FailSafe Length
	Numeric teLength(10); // 离市周期 Trailing Exit Length
	Bool LastProfitableTradeFilter(true); // 使用入市过滤条件
VARS
	Numeric MinPoint; // 最小变动单位
	NumericSeries AvgTR; // ATR
	Numeric N; // N 值
	Numeric totalEquity; // 按最新收盘价计算出的总资产
	Numeric TurtleUnits; // 交易单位
	NumericSeries DonchianHi; // 唐奇安通道上轨，延后1个Bar
	NumericSeries DonchianLo; // 唐奇安通道下轨，延后1个Bar
	NumericSeries fsDonchianHi; // 唐奇安通道上轨，延后1个Bar，长周期
	NumericSeries fsDonchianLo; // 唐奇安通道下轨，延后1个Bar，长周期
	Numeric ExitHighestPrice; // 离市时判断需要的N周期最高价
	Numeric ExitLowestPrice; // 离市时判断需要的N周期最低价
	Numeric myEntryPrice; // 开仓价格
	Numeric myExitPrice; // 平仓价格
	Bool SendOrderThisBar(false); // 当前Bar有过交易
	NumericSeries preEntryPrice(0); // 前一次开仓的价格
	BoolSeries PrebreakoutFailure(false); // 前一次突破是否失败
BEGIN
	if (BarStatus == 0) {
		preEntryPrice = InvalidNumeric;
		PrebreakoutFailure = false;
	}

// 集合竞价和小节休息过滤
	if (!CallAuctionFilter()) RETURN;

	MinPoint = MinMove * PriceScale;
	AvgTR = XAverage(trueRange, ATRLength);
	N = AvgTR[1];
	totalEquity = Portfolio_CurrentCapital() + Portfolio_UsedMargin();
	TurtleUnits = (totalEquity * RiskRatio / 100) / (N * ContractUnit() * BigPointValue());
	TurtleUnits = IntPart(TurtleUnits); // 对小数取整

	DonchianHi = HighestFC(High[1], boLength);
	DonchianLo = LowestFC(Low[1], boLength);

	fsDonchianHi = HighestFC(High[1], fsLength);
	fsDonchianLo = LowestFC(Low[1], fsLength);

	ExitLowestPrice = LowestFC(Low[1], teLength);
	ExitHighestPrice = HighestFC(High[1], teLength);

	Commentary("N=" + Text(N));
	Commentary("preEntryPrice=" + Text(preEntryPrice));
	Commentary("PrebreakoutFailure=" + IIFString(PrebreakoutFailure, "true", "false"));

// 当不使用过滤条件，或者使用过滤条件并且条件为PrebreakoutFailure为true进行后续操作
	if (MarketPosition == 0 && ((!LastProfitableTradeFilter) Or(PrebreakoutFailure))) {
		// 突破开仓
		if (High > DonchianHi && TurtleUnits >= 1) {
			// 开仓价格取突破上轨+一个价位和最高价之间的较小值，这样能更接近真实情况，并能尽量保证成交
			myEntryPrice = min(high, DonchianHi + MinPoint);
			myEntryPrice = IIF(myEntryPrice < Open, Open, myEntryPrice); // 大跳空的时候用开盘价代替
			preEntryPrice = myEntryPrice;
			Buy(TurtleUnits, myEntryPrice);
			SendOrderThisBar = true;
			PrebreakoutFailure = false;
		}

		if (Low < DonchianLo && TurtleUnits >= 1) {
			// 开仓价格取突破下轨-一个价位和最低价之间的较大值，这样能更接近真实情况，并能尽量保证成交
			myEntryPrice = max(low, DonchianLo - MinPoint);
			myEntryPrice = IIF(myEntryPrice > Open, Open, myEntryPrice); // 大跳空的时候用开盘价代替
			preEntryPrice = myEntryPrice;
			SendOrderThisBar = true;
			SellShort(TurtleUnits, myEntryPrice);
			SendOrderThisBar = true;
			PrebreakoutFailure = false;
		}
	}

// 长周期突破开仓 Failsafe breakout point
	if (MarketPosition == 0) {
		Commentary("fsDonchianHi=" + Text(fsDonchianHi));
		if (High > fsDonchianHi && TurtleUnits >= 1) {
			// 开仓价格取突破上轨+一个价位和最高价之间的较小值，这样能更接近真实情况，并能尽量保证成交
			myEntryPrice = min(high, fsDonchianHi + MinPoint);
			myEntryPrice = IIF(myEntryPrice < Open, Open, myEntryPrice); // 大跳空的时候用开盘价代替
			preEntryPrice = myEntryPrice;
			Buy(TurtleUnits, myEntryPrice);
			SendOrderThisBar = true;
			PrebreakoutFailure = false;
		}

		Commentary("fsDonchianLo=" + Text(fsDonchianLo));
		if (Low < fsDonchianLo && TurtleUnits >= 1) {
			// 开仓价格取突破下轨-一个价位和最低价之间的较大值，这样能更接近真实情况，并能尽量保证成交
			myEntryPrice = max(low, fsDonchianLo - MinPoint);
			myEntryPrice = IIF(myEntryPrice > Open, Open, myEntryPrice); // 大跳空的时候用开盘价代替
			preEntryPrice = myEntryPrice;
			SellShort(TurtleUnits, myEntryPrice);
			SendOrderThisBar = true;
			PrebreakoutFailure = false;
		}
	}

	if (MarketPosition == 1) // 有多仓的情况
	{
		Commentary("ExitLowestPrice=" + Text(ExitLowestPrice));
		if (Low < ExitLowestPrice) {
			myExitPrice = max(Low, ExitLowestPrice - MinPoint);
			myExitPrice = IIF(myExitPrice > Open, Open, myExitPrice); // 大跳空的时候用开盘价代替
			Sell(0, myExitPrice); // 数量用0的情况下将全部平仓
		}
		else {
			if (preEntryPrice != InvalidNumeric && TurtleUnits >= 1) {
				if (Open >= preEntryPrice + 0.5 * N) // 如果开盘就超过设定的1/2N,则直接用开盘价增仓。
				{
					myEntryPrice = Open;
					preEntryPrice = myEntryPrice;
					Buy(TurtleUnits, myEntryPrice);
					SendOrderThisBar = true;
				}

				while (High >= preEntryPrice + 0.5 * N) // 以最高价为标准，判断能进行几次增仓
				{
					myEntryPrice = preEntryPrice + 0.5 * N;
					preEntryPrice = myEntryPrice;
					Buy(TurtleUnits, myEntryPrice);
					SendOrderThisBar = true;
				}
			}

			// 止损指令
			if (Low <= preEntryPrice - 2 * N && SendOrderThisBar == false) // 加仓Bar不止损
			{
				myExitPrice = preEntryPrice - 2 * N;
				Sell(0, myExitPrice); // 数量用0的情况下将全部平仓
				PrebreakoutFailure = true;
			}
		}
	}
	else if (MarketPosition == -1) // 有空仓的情况
	{
		// 求出持空仓时离市的条件比较值
		Commentary("ExitHighestPrice=" + Text(ExitHighestPrice));
		if (High > ExitHighestPrice) {
			myExitPrice = Min(High, ExitHighestPrice + MinPoint);
			myExitPrice = IIF(myExitPrice < Open, Open, myExitPrice); // 大跳空的时候用开盘价代替
			BuytoCover(0, myExitPrice); // 数量用0的情况下将全部平仓
		}
		else {
			if (preEntryPrice != InvalidNumeric && TurtleUnits >= 1) {
				if (Open <= preEntryPrice - 0.5 * N) // 如果开盘就超过设定的1/2N,则直接用开盘价增仓。
				{
					myEntryPrice = Open;
					preEntryPrice = myEntryPrice;
					SellShort(TurtleUnits, myEntryPrice);
					SendOrderThisBar = true;
				}

				while (Low <= preEntryPrice - 0.5 * N) // 以最低价为标准，判断能进行几次增仓
				{
					myEntryPrice = preEntryPrice - 0.5 * N;
					preEntryPrice = myEntryPrice;
					SellShort(TurtleUnits, myEntryPrice);
					SendOrderThisBar = true;
				}
			}

			// 止损指令
			if (High >= preEntryPrice + 2 * N && SendOrderThisBar == false) // 加仓Bar不止损
			{
				myExitPrice = preEntryPrice + 2 * N;
				BuytoCover(0, myExitPrice); // 数量用0的情况下将全部平仓
				PrebreakoutFailure = true;
			}
		}
	}
END

//------------------------------------------------------------------------
// 编译版本	GS2010.12.08
// 版权所有	TradeBlazer Software 2003－2010
// 更改声明	TradeBlazer Software保留对TradeBlazer平
//			台每一版本的TradeBlazer公式修改和重写的权利
//------------------------------------------------------------------------
